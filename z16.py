# x = x*2 - 1
# hypot2 = x*x + y*y
# c = (a+b) * (a-b)
# Если используются операторы с разными приоритетами, проьбелами
# окружать наименьший приоритет + сравнение и присвоение так же
# По правилам PEP 8, все импорты нужно прописывать вначале файла.
# Если импротов много, то каждый пишется на новой строке
# import random
#
#
# def random():
#     rand = random.randint(1,2)
#
#
#     if rand == 1:
#         print('Выпало 1')
#     else:
#         print('Выпало 2')
#
#
# random()

# code...


# def main():
#     # Какой-то код
#
#
#
# if __name__ == '__main__':
#     main()
# Конструкция предназначена для разделения кода, который будет выполняться при вызове кода как модуля
# (при импротировании его в другой скрипт) - и при запуске самого модуля, как отдельного файла.

# PEP8 предлагает ограничить длину строки 79 символами. Это рекомендуется делать, чтобы вы имели
# возможность открывать несколько файлов рядом друг с другом, а также избегать переноса строк.

# 1) Длина комментариев при документации не более 72 символов
# 2) Не использовать сокращения, начинать предложения с заглавной буквы
# 3) Актуализировать комментарии при изменении кода

# Пробелами нужно отделять:
# 1) Операторы присвоения =, +=, -= и тд
# 2) Сравнения ==, !=, >, <, >=, <= и is, is not, in, not in.
# 3) Логические and, or, not
# когда = используется для присвоения значения аргумента функции, не окружайте его пробелами

# Когда лучше игнорировать правиле PEP8:
# 1) Если соблюдение нарушит совместимость с соответствующим программным обеспечением.
# 2) Если код, сопутствующий тому, над чем вы работаете, несовместим с PEP8.
# 3) Если код нужно оставить совместимым с неактуальными версиями Python.
#
def z12():
    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

    for i in a:
        if i > 5:
            print(i)
    b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
    c = []
    for i in a:
        if i in b:
            c.append(i)
    print(c)


def z3():
    my_dict = {
        'a': 500,
        'b': 5874,
        'c': 560,
        'd': 400,
        'e': 5874,
        'f': 20,
    }
    print(sorted(my_dict, key=my_dict.get)[-3:])


def z4(seconds):
    minutes, seconds = divmod(seconds, 60)  # В 1 переменную заносится результат деления, во 2ю остаток
    hours, minutes = divmod(minutes, 60)  # Аналогично
    days, hours = divmod(hours, 24)  # Аналогично

    print(f"{days}:{hours:02d}:{minutes:02d}:{seconds:02d}")  # возвращает ответ в виде дни:часы:минуты:секунды
